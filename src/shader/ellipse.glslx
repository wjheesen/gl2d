precision mediump float;

uniform mat4 projection;   // Projection matrix
uniform vec4 color;        // Color of ellipse
uniform vec4 bounds;       // Boundaries of ellipse 
attribute vec2 basisCoord; // Specifies current boundary vertex (0,1),(0,0),(1,0),(1,1)
varying vec2 NDC;          // Interpolated from basisCoord

export void vertex(){
      // Get boundaries of ellipse
      float left = bounds[0];
      float top = bounds[1];
      float right = bounds[2];
      float bottom = bounds[3];
      float width = right - left;
      float height = top - bottom;
      // Get position of current vertex
      float posX = width * basisCoord.x + left;     
      float posY = height * basisCoord.y + bottom; 
      // Pass position to fragment shader
      gl_Position = projection * vec4(posX, posY, 1.0, 1.0);
      // Transform basis coord to NDC space and pass to fragment shader
      NDC = basisCoord * 2.0 - 1.0;
}

export void fragment(){
      // Keep pixel if distance squared from origin <= 1.0
      float distanceSquared = dot(NDC, NDC);
      float isInEllipse = float(distanceSquared <= 1.0);
      gl_FragColor = color * isInEllipse;
}

