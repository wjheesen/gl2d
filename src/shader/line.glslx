precision mediump float;

uniform mat4 projection;   // Projection matrix
uniform vec4 color;        // Color of line
uniform vec4 line;         // Position of line
uniform float thickness;   // Thickness of line
attribute vec2 basisCoord; // Specifies current line vertex (0,0.5),(0,-0.5),(1,-0.5),(1,0.5)

export void vertex(){
    // Let p1 = (x1,y1), p2 = (x2,y2)
    vec2 p1 = vec2(line[0], line[1]);
    vec2 p2 = vec2(line[2], line[3]);
    // Scale the square {left: 0, right: 1, bottom: -0.5, top: 0.5}
    // to a rectangle with width=dist(p1,p2), and height = thickness
    float width = distance(p1, p2);
    float height = thickness;
    float sx = width * basisCoord.x;
    float sy = height * basisCoord.y;
    // Rotate the rectangle by the angle formed by p2, p1, and (x1+e, y1) for any e>0
    float hypotenuse = width;
    float adjacent = p2.x - p1.x;
    float opposite = p2.y - p1.y;
    float sin = opposite / hypotenuse;
    float cos = adjacent / hypotenuse;
    float rx = cos * sx - sin * sy;
    float ry = sin * sx + cos * sy;
    // Translate rectangle to p1
    float tx = rx + p1.x;
    float ty = ry + p1.y;
    // Apply projection matrix
    gl_Position = projection * vec4(tx, ty, 1.0, 1.0);
}

export void fragment(){
    gl_FragColor = color;
}

